1.what is a state?
A.state of a component is an object that holds some information that may 
  change over the lifetime of the component.We should always try to make 
  our state as simple as possible and minimize numberof useful components.

2.explain about useState hook?
A.useState is a Hook that allows you to add state variables to functional 
  components in React. Before the introduction of Hooks, state management 
  was only possible in class components. With Hooks,functional components 
  can now have their own statewithout converting them into class components.
    1.useState returns the object which containsthe initial value of the 
      state and a function used to update the change.It accepts a new 
      state value and triggers a rerender of the component.

3.explain about useRef?
A.useRef is a Hook in React that returns a mutable ref object whose 
  .current property is initialized to the passed argument (initial value).
  The returned object will persist across renders, allowing us to maintain
  values between renders without causing re-renders. Additionally, useRef 
  is commonly used to access or manipulate DOM elements.

  Imagine useRef as a magic wand in React. You can wave this wand to 
  remember something (like a value or a reference to a DOM element) 
  without causing the wizard (React) to redraw the whole magical world 
  (re-render the component).

4.explain the difference between useRef and useState hooks?
A. 1.useState:
       a.allows functional components to have their own state.
       b.allows us to update the state inside component.
       c.it causes components to rerender after state updates.
       d.returns the current state.
   2.useRef:
       a.returns a object with a property containing the initial value.
       b.doesnt cause a component to rerender when the value or state changes.
       c.data is persisted between renders.
       d.allows dom referencing.

5.explain about setInterval and clearInterval?
A.  1.setInterval:
         setInterval is a built-in JavaScript function that repeatedly 
         calls a function or executes a code snippet at a specified interval 
         (in milliseconds).
         It takes two parameters:
             The function or code snippet to be executed.
             The interval (in milliseconds) at which the function should 
             be called.
             It returns a unique ID (interval ID) that identifies the interval, 
             which can be used to stop the interval later using clearInterval.

    2.clearInterval:
        clearInterval is another built-in JavaScript function used to stop 
        the interval that was previously started with setInterval.
        It takes one parameter, which is the interval ID returned by setInterval.
        When called with the interval ID, it stops the interval specified
        by that ID, preventing further execution of the associated function or code snippet.

6.what is an effect or sideeffect in react?
A. 1.the main job of react is to render UI and react to user inputs.
   2.evaluate and render jsx manage state and props recat to (user) events
     and inputs and re evaluate component upon state and prop changes.
   3.anything other then these are called side effects.
   4.storing data in browser storage, sending http requests to the backend
     server,managing timers etc. comes under effects or side effects.
   5.for sideeffects we use useEffect hook in react functional components.

7.what is useEffect hook?
A.The useEffect hook is one of the most versatile hooks in React. It allows 
  you to perform side effects in function components. Side effects may 
  include data fetching, subscriptions, or manually changing the DOM in React 
  components. useEffect runs after every render by default and can optionally 
  clean up after itself.   
  

  a.Basic syntax:

    useEffect(() => {
      //side effect code
      return () => {
        //cleanup code here(optional)
      }
    });

  b.scenarios based on [] in react:
      1.when there is no [] or dependemncy array:
          if we dont have dependency array then we get into infinite loop.
      2.when there is [] present and do not have any depdencies:
          no changes and hence it only runs once during component mounting.
      3.where are is[] and dependencies present in it:
          it will execute only when the conditions or depdencies are met.
      4.cleanup functions:
          we use it for clean up functions too like unsubscribe or when componment
          unmounts all these conditons like 1,2,3 apply there also 


8.what are memoization techniques used in react?
A.In React, memoization is a technique used to optimize performance by 
  caching the results of expensive function calls and reusing those results 
  when the same inputs occur again. This can help prevent unnecessary re-renders 
  of components and improve overall application efficiency.
  
  There are primarily two types of memoization techniques commonly used in React:

      1.Memoization of Components: This involves preventing unnecessary re-renders 
        of functional components using React's React.memo() higher-order component.
      2.Memoization of Functions: This involves caching the results of expensive 
        function calls using techniques such as caching with closures or using 
        memoization libraries like memoize-one or lodash.memoize.

  Memoization of functions involves caching the results of function calls based 
  on the arguments passed to them. This technique is useful when you have 
  expensive computations or calculations that are repeatedly called with the 
  same inputs.

  Benefits of Memoization in React:
     1.Improved Performance: Memoization reduces unnecessary computation and r
       enders, leading to improved performance, especially in complex applications.
     2.Reduced Re-renders: By memoizing components and functions, React can 
       avoid unnecessary re-renders and optimize rendering performance.
     3.Caching Results: Memoization caches the results of expensive computations, 
       reducing the need to recompute the same values multiple times.
     4.Simplified Code: Memoization can lead to cleaner and more readable code 
       by separating concerns and optimizing performance where needed.
       Overall, memoization is a powerful technique in React for optimizing performance 
       and improving the user experience, particularly in applications with 
       frequent rendering and complex computations.


6.explain useMemo hook in detail?
A.useMemo is a hook provided by React that allows you to memoize the result 
  of a function call and cache it so that it's only recomputed when its dependencies 
  change. It's useful for optimizing performance by avoiding unnecessary re-computations 
  of values that are expensive to calculate.

  const memoizedValue = useMemo(() => computeValue(), [dependency1, dependency2, ...]);

  Parameters:
     1.computeValue: A function that computes the value you want to memoize.
     2.dependencies: An array of dependencies. If any of the dependencies change, 
                     the memoized value will be recalculated. If the dependencies 
                     remain the same, the memoized value will be reused.

  How useMemo Works:
     1.Initial Render: When a component renders for the first time, or when 
                       any of its dependencies change, React calls the function 
                       passed to useMemo and computes the value.
     2.Memoization: React memoizes the computed value along with the dependencies.
     3.Re-render: If the component re-renders and the dependencies remain the 
                 same, React returns the memoized value without recomputing it.
     4.Dependency Change: If any of the dependencies change in subsequent 
                          renders, React re-runs the function passed to useMemo 
                          and computes a new value, updating the memoized value.

  Use Cases for useMemo:
    1.Expensive Computations: useMemo is useful for memoizing the results o
                              of expensive computations or calculations, ensuring 
                              that they are only recalculated when necessary.
    2.Preventing Re-renders: By memoizing values derived from props or state, 
                             useMemo can prevent unnecessary re-renders of components 
                             when the computed values remain the same.
    3.Optimizing Performance: Memoizing values with useMemo can lead to p
                              performance optimizations by reducing the computational 
                              overhead and avoiding redundant calculations.    

7.what is useCallback hook?
A. The useCallback hook is used in React to memoize callback functions, preventing 
   unnecessary re-creation of callbacks on each render. This can be particularly 
   useful when passing callbacks to child components, as it helps optimize performance 
   by avoiding unnecessary re-renders of child components.

   const memoizedCallback = useCallback(() => {
  // Callback function
   }, [dependency1, dependency2, ...]);

Parameters:
  1.() => {}: The callback function to be memoized.
  2.[dependency1, dependency2, ...]: An array of dependencies. If any of the 
                                     dependencies change, the memoized callback will 
                                     be recreated. If the dependencies remain the same, the 
                                     memoized callback will be reused.  

How useCallback Works:
   1.Initial Render: When a component renders for the first time, or when 
                     any of its dependencies change, React calls the function passed 
                     to useCallback and creates a memoized callback.
   2.Memoization: React memoizes the callback along with the dependencies.
   3.Re-render: If the component re-renders and the dependencies remain the same, 
                React returns the memoized callback without recreating it.
   4.Dependency Change: If any of the dependencies change in subsequent renders, 
                        React recreates the memoized callback.

Use Cases for useCallback:
   1.Preventing Re-renders: useCallback is useful for preventing unnecessary 
                            re-renders of child components when passing callbacks 
                            as props, especially if the callbacks are created inline in 
                            the parent component.
   2.Optimizing Performance: Memoizing callbacks with useCallback can lead to 
                             performance optimizations by avoiding unnecessary 
                             re-creations of callbacks on each render.

8.difference between useMemo and useCallback hook?
A.useMemo:
    Purpose: useMemo is used to memoize the result of a function call and 
             cache it so that it's only recomputed when its dependencies change.
    Usage:
       1.Useful for memoizing the result of expensive computations or calculations.
       2.Typically used for optimizing performance by avoiding unnecessary re-computations 
         of values.
  
  useCallback:
    Purpose: useCallback is used to memoize callback functions, preventing unnecessary 
             re-creation of callbacks on each render.  

    Usage:
      1.Useful for preventing unnecessary re-renders of child components when 
        passing callbacks as props.
      2.Helps optimize performance by avoiding unnecessary re-creations of 
        callbacks.
  
  Differences:
     Purpose:
        1.useMemo: Memoizes the result of a function call.
        2.useCallback: Memoizes callback functions.
     Usage:
        1.useMemo: Used for memoizing the result of expensive computations.
        2.useCallback: Used for memoizing callback functions, especially when 
                       passing callbacks as props to child components.
      Return Value:
         1.useMemo: Returns the memoized value.
         2.useCallback: Returns the memoized callback function.
      Dependencies:
         Both hooks accept an array of dependencies, and the memoized value or 
         callback will be recalculated/recreated if any of the dependencies change.

  Important points to note:
    It's essential to understand that useMemo performs a shallow comparison on the dependencies array. 
    This means that it only detects changes if the reference to an object or array 
    changes, not if the object or array's contents change.

    Shallow Comparison:
      1.Primitive Data Types: For primitive data types like strings, numbers, 
                              and booleans, useMemo performs a direct comparison, 
                              checking if the new value is strictly equal (===) to the 
                              previous value.
      2.Objects and Arrays: For objects and arrays, useMemo compares the references. 
                            If the reference to the object or array changes, 
                            useMemo considers it as a dependency change. However, 
                            it doesn't perform a deep comparison to check if the contents 
                            of the object or array have changed.  
           
      Like useMemo, useCallback also performs shallow comparisons on its dependencies. 
      It compares the references of the dependencies rather than the contents 
      of objects or arrays.

      When you provide dependencies to useCallback, it will memoize the callback 
      function and recreate it only when any of the dependencies change. However, 
      it does not perform deep comparisons to detect changes in the contents 
      of objects or arrays.

      If you need to perform deep comparisons for complex data structures like 
      objects or arrays, you would need to handle it manually, perhaps by using l
      ibraries like lodash.isEqual or by ensuring that you update the 
      reference of the object or array when its contents change.

 
                  


